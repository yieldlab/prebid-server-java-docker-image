name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      OCI_REGISTRY: ghcr.io
      DOCKER_IMAGE_NAME: yieldlab/prebid-server-java

    steps:
    - name: Checkout version file
      uses: actions/checkout@v3
      with:
        sparse-checkout: |
          latest-release-version
        sparse-checkout-cone-mode: false

    - name: Extract version
      run: |
        target_tag=$(cat latest-release-version)
        echo "TARGET_TAG=$target_tag" >> $GITHUB_ENV

    - name: Check version already exist
      run: |
        ghcr_token=$(curl https://$OCI_REGISTRY/token\?scope\="repository:$DOCKER_IMAGE_NAME:pull" | jq -r '.token')
        status_code=$(curl --silent \
                  -H "Authorization: Bearer $ghcr_token" \
                  -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
                  -o /dev/null -L -w "%{response_code}" \
                  https://$OCI_REGISTRY/v2/$DOCKER_IMAGE_NAME/manifests/$TARGET_TAG)
        [[ "$status_code" -ne 404 ]] && tag_existing="true" || tag_existing="false"
        echo "TAG_ALREADY_EXISTING=$tag_existing" >> $GITHUB_ENV

    - name: Checkout prebid-server-java
      uses: actions/checkout@v3
      with:
        repository: 'prebid/prebid-server-java'
        ref: ${{ env.TARGET_TAG }}

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: corretto
        java-version: 17

    - name: Check environment
      run: |
        env | sort
        git --version
        docker version
        java --version
        jq --version
        ./mvnw --batch-mode --version

    - name: Build application
      run: ./mvnw --batch-mode clean package

    - name: Log in to the container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.OCI_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        # push only when main branch and docker tag not existing
        push: ${{ (github.ref == 'refs/heads/main') && (env.TAG_ALREADY_EXISTING == 'false') }}
        tags: ${{ env.OCI_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.TARGET_TAG }}

    - name: Prepare release checkout repo
      if: ${{ (github.ref == 'refs/heads/main') }}
      uses: actions/checkout@v3
      with:
        fetch-depth: '0'

    - name: Add and push git tag
      if: ${{ (github.ref == 'refs/heads/main') && (env.TAG_ALREADY_EXISTING == 'false') }}
      run: |
        git status
        git config user.name CI
        git config user.email "<>"
        git tag -a --message='Release version ${{ env.TARGET_TAG }}' '${{ env.TARGET_TAG }}'
        git checkout '${{ env.TARGET_TAG }}'
        git show
        git push origin tag -- '${{ env.TARGET_TAG }}'

    - name: Create GitHub release
      if: ${{ (github.ref == 'refs/heads/main') && (env.TAG_ALREADY_EXISTING == 'false') }}
      uses: release-drafter/release-drafter@v5
      with:
        config-name: release-drafter.yml
        publish: true
        name: "Release ${{ env.TARGET_TAG }}"
        tag: ${{ env.TARGET_TAG }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
